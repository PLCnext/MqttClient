//
// Copyright (c) Phoenix Contact GmbH & Co. KG. All rights reserved.
// Licensed under the MIT. See LICENSE file in the project root for full license information.
// SPDX-License-Identifier: MIT
//
#pragma once
#include "Arp/System/Core/Arp.h"
#include "Arp/System/Rsc/Services/IRscSerializable.hpp"
#include "Arp/System/Rsc/Services/RscReader.hpp"
#include "Arp/System/Rsc/Services/RscString.hxx"
#include "Arp/System/Rsc/Services/RscWriter.hpp"
#include "SslOptions.hpp"
#include "WillOptions.hpp"
#include <vector>

// DO NOT MODIFY THIS FILE, THIS FILE IS AUTOGENERATED

namespace PxceTcs { namespace MqttClient { namespace Services
{

using namespace Arp;
using namespace Arp::System::Rsc::Services;

/// <summary>
/// Holds the set of options that control how the client connects to a server.
/// </summary>
struct ConnectOptions : public IRscSerializable
{
    /// <summary>
    /// The keep alive interval in seconds.
    /// </summary>
    int32                       keepAliveInterval = 0;

    /// <summary>
    /// The connect timeout in seconds.
    /// </summary>
    int32                       connectTimeout = 0;

    /// <summary>
    /// The user name to use for the connection.
    /// </summary>
    RscString<512>              userName;

    /// <summary>
    /// The password to use for the connection.
    /// </summary>
    RscString<512>              password;

    /// <summary>
    /// The maximum number of messages that can be in-flight simultaneously.
    /// </summary>
    int32                       maxInflight = 0;

    /// <summary>
    /// The LWT options to use for the connection.
    /// </summary>
    WillOptions                 willOptions;

    /// <summary>
    /// The SSL options to use for the connection.
    /// </summary>
    SslOptions                  sslOptions;

    /// <summary>
    /// Whether the server should remember state for the client across reconnects.
    /// </summary>
    boolean                     isCleanSession = false;

    /// <summary>
    /// The list of servers to which the client will connect.
    /// Each entry should be of the form \em protocol://host:port where protocol must be \em tcp or \em ssl.
    /// For \em host, you can specify either an IP address or a domain name.
    /// </summary>
    std::vector<RscString<512>> servers;

    /// <summary>
    /// The version of MQTT to be used on the connect.
    /// MQTTVERSION_DEFAULT (0) = default: start with 3.1.1, and if that fails, fall back to 3.1
    /// MQTTVERSION_3_1     (3) = only try version 3.1
    /// MQTTVERSION_3_1_1   (4) = only try version 3.1.1
    /// </summary>
    int32                       mqttVersion = 0;

    /// <summary>
    /// Enable or disable automatic reconnects.
    /// </summary>
    boolean                     automaticReconnect = false;

    /// <summary>
    /// The minimum retry interval in seconds. Doubled on each failed retry.
    /// </summary>
    int32                       minRetryInterval = 0;

    /// <summary>
    /// The maximum retry interval in seconds. The doubling stops here on failed retries.
    /// </summary>
    int32                       maxRetryInterval = 0;

    void Serialize(RscWriter& writer)const override
    {
        writer.Write(this->keepAliveInterval);
        writer.Write(this->connectTimeout);
        writer.Write(this->userName);
        writer.Write(this->password);
        writer.Write(this->maxInflight);
        writer.Write(this->willOptions);
        writer.Write(this->sslOptions);
        writer.Write(this->isCleanSession);
        writer.WriteArray(this->servers);
        writer.Write(this->mqttVersion);
        writer.Write(this->automaticReconnect);
        writer.Write(this->minRetryInterval);
        writer.Write(this->maxRetryInterval);
    }

    void Deserialize(RscReader& reader)override
    {
        reader.Read(this->keepAliveInterval);
        reader.Read(this->connectTimeout);
        reader.Read(this->userName);
        reader.Read(this->password);
        reader.Read(this->maxInflight);
        reader.Read(this->willOptions);
        reader.Read(this->sslOptions);
        reader.Read(this->isCleanSession);
        reader.ReadArray(this->servers);
        reader.Read(this->mqttVersion);
        reader.Read(this->automaticReconnect);
        reader.Read(this->minRetryInterval);
        reader.Read(this->maxRetryInterval);
    }

    static size_t GetFieldCount(void)
    {
        return 13;
    }
};

}}} // end of namespace PxceTcs::MqttClient::Services
