//
// Copyright (c) Phoenix Contact GmbH & Co. KG. All rights reserved.
// Licensed under the MIT. See LICENSE file in the project root for full license information.
// SPDX-License-Identifier: MIT
//
#pragma once
#include "Arp/System/Core/Arp.h"
#include "Arp/System/Rsc/Services/IRscSerializable.hpp"
#include "Arp/System/Rsc/Services/RscReader.hpp"
#include "Arp/System/Rsc/Services/RscString.hxx"
#include "Arp/System/Rsc/Services/RscWriter.hpp"

// DO NOT MODIFY THIS FILE, THIS FILE IS AUTOGENERATED

namespace PxceTcs { namespace MqttClient { namespace Services
{

using namespace Arp;
using namespace Arp::System::Rsc::Services;

/// <summary>
/// Holds the set of options that govern the Last Will and Testament feature.
/// </summary>
struct WillOptions : public IRscSerializable
{
    /// <summary>
    /// The LWT message is published to the this topic.
    /// </summary>
    RscString<512> topic;

    /// <summary>
    /// The message that is published to the Will Topic.
    /// </summary>
    RscString<512> payload;

    /// <summary>
    /// The message Quality of Service.
    /// </summary>
    int32          qos = 0;

    /// <summary>
    /// Tell the broker to keep the LWT message after send to subscribers.
    /// </summary>
    boolean        retained = false;

    void Serialize(RscWriter& writer)const override
    {
        writer.Write(this->topic);
        writer.Write(this->payload);
        writer.Write(this->qos);
        writer.Write(this->retained);
    }

    void Deserialize(RscReader& reader)override
    {
        reader.Read(this->topic);
        reader.Read(this->payload);
        reader.Read(this->qos);
        reader.Read(this->retained);
    }

    static size_t GetFieldCount(void)
    {
        return 4;
    }
};

}}} // end of namespace PxceTcs::MqttClient::Services
