//
// Copyright (c) Phoenix Contact GmbH & Co. KG. All rights reserved.
// Licensed under the MIT. See LICENSE file in the project root for full license information.
// SPDX-License-Identifier: MIT
//
#include "MqttClientServiceProxy.hpp"
#include "Arp/System/Rsc/Services/RscClient.hpp"
#include "Arp/System/Rsc/Services/RscClientContext.hpp"
#include "Arp/System/Commons/Logging.h"

// DO NOT MODIFY THIS FILE, THIS FILE IS AUTOGENERATED BY IMqttClientService.cs

namespace PxceTcs { namespace MqttClient { namespace Services
{

MqttClientServiceProxy::MqttClientServiceProxy(RscHandle providerHandle, RscHandle serviceHandle, RscClient& rscClient)
    : Base(providerHandle, serviceHandle, rscClient)
{
}

int32 MqttClientServiceProxy::Connect(int32 clientId, const ConnectOptions& opts)
{
    const RscHandle methodHandle = 1;
    RscClient::TransactionGuard guard(this->rscClient, *this);

    RscClientContext context(this->rscClient);
    context.BeginServiceInvocationRequest(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // serialize params here
    RscWriter& writer = context.GetWriter();
    writer.Write(clientId);
    writer.Write(opts);

    // process end of invocation request
    context.EndServiceInvocationRequest();

    // start reading invocation response
    context.BeginServiceInvocationResponse(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // deserialize return params here
    RscReader& reader = context.GetReader();
    int32 result = 0;
    reader.Read(result);

    // end reading invocation response
    context.EndServiceInvocationResponse();

    return result;
}

int32 MqttClientServiceProxy::CreateClient(const RscString<512>& serverURI, const RscString<512>& clientId)
{
    const RscHandle methodHandle = 2;
    RscClient::TransactionGuard guard(this->rscClient, *this);

    RscClientContext context(this->rscClient);
    context.BeginServiceInvocationRequest(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // serialize params here
    RscWriter& writer = context.GetWriter();
    writer.Write(serverURI);
    writer.Write(clientId);

    // process end of invocation request
    context.EndServiceInvocationRequest();

    // start reading invocation response
    context.BeginServiceInvocationResponse(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // deserialize return params here
    RscReader& reader = context.GetReader();
    int32 result = 0;
    reader.Read(result);

    // end reading invocation response
    context.EndServiceInvocationResponse();

    return result;
}

int32 MqttClientServiceProxy::DestroyClient(int32 clientId)
{
    const RscHandle methodHandle = 3;
    RscClient::TransactionGuard guard(this->rscClient, *this);

    RscClientContext context(this->rscClient);
    context.BeginServiceInvocationRequest(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // serialize params here
    RscWriter& writer = context.GetWriter();
    writer.Write(clientId);

    // process end of invocation request
    context.EndServiceInvocationRequest();

    // start reading invocation response
    context.BeginServiceInvocationResponse(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // deserialize return params here
    RscReader& reader = context.GetReader();
    int32 result = 0;
    reader.Read(result);

    // end reading invocation response
    context.EndServiceInvocationResponse();

    return result;
}

int32 MqttClientServiceProxy::Disconnect(int32 clientId, int32 timeoutMS)
{
    const RscHandle methodHandle = 4;
    RscClient::TransactionGuard guard(this->rscClient, *this);

    RscClientContext context(this->rscClient);
    context.BeginServiceInvocationRequest(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // serialize params here
    RscWriter& writer = context.GetWriter();
    writer.Write(clientId);
    writer.Write(timeoutMS);

    // process end of invocation request
    context.EndServiceInvocationRequest();

    // start reading invocation response
    context.BeginServiceInvocationResponse(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // deserialize return params here
    RscReader& reader = context.GetReader();
    int32 result = 0;
    reader.Read(result);

    // end reading invocation response
    context.EndServiceInvocationResponse();

    return result;
}

boolean MqttClientServiceProxy::IsConnected(int32 clientId)
{
    const RscHandle methodHandle = 5;
    RscClient::TransactionGuard guard(this->rscClient, *this);

    RscClientContext context(this->rscClient);
    context.BeginServiceInvocationRequest(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // serialize params here
    RscWriter& writer = context.GetWriter();
    writer.Write(clientId);

    // process end of invocation request
    context.EndServiceInvocationRequest();

    // start reading invocation response
    context.BeginServiceInvocationResponse(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // deserialize return params here
    RscReader& reader = context.GetReader();
    boolean result = false;
    reader.Read(result);

    // end reading invocation response
    context.EndServiceInvocationResponse();

    return result;
}

int32 MqttClientServiceProxy::Publish(int32 clientId, const RscString<512>& topic, RscVariant<512> payload, uint32 length, int32 qos, boolean retained)
{
    const RscHandle methodHandle = 6;
    RscClient::TransactionGuard guard(this->rscClient, *this);

    RscClientContext context(this->rscClient);
    context.BeginServiceInvocationRequest(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // serialize params here
    RscWriter& writer = context.GetWriter();
    writer.Write(clientId);
    writer.Write(topic);
    writer.Write(payload);
    writer.Write(length);
    writer.Write(qos);
    writer.Write(retained);

    // process end of invocation request
    context.EndServiceInvocationRequest();

    // start reading invocation response
    context.BeginServiceInvocationResponse(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // deserialize return params here
    RscReader& reader = context.GetReader();
    int32 result = 0;
    reader.Read(result);

    // end reading invocation response
    context.EndServiceInvocationResponse();

    return result;
}

int32 MqttClientServiceProxy::Reconnect(int32 clientId)
{
    const RscHandle methodHandle = 7;
    RscClient::TransactionGuard guard(this->rscClient, *this);

    RscClientContext context(this->rscClient);
    context.BeginServiceInvocationRequest(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // serialize params here
    RscWriter& writer = context.GetWriter();
    writer.Write(clientId);

    // process end of invocation request
    context.EndServiceInvocationRequest();

    // start reading invocation response
    context.BeginServiceInvocationResponse(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // deserialize return params here
    RscReader& reader = context.GetReader();
    int32 result = 0;
    reader.Read(result);

    // end reading invocation response
    context.EndServiceInvocationResponse();

    return result;
}

int32 MqttClientServiceProxy::Subscribe(int32 clientId, const RscString<512>& topicFilter)
{
    const RscHandle methodHandle = 8;
    RscClient::TransactionGuard guard(this->rscClient, *this);

    RscClientContext context(this->rscClient);
    context.BeginServiceInvocationRequest(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // serialize params here
    RscWriter& writer = context.GetWriter();
    writer.Write(clientId);
    writer.Write(topicFilter);

    // process end of invocation request
    context.EndServiceInvocationRequest();

    // start reading invocation response
    context.BeginServiceInvocationResponse(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // deserialize return params here
    RscReader& reader = context.GetReader();
    int32 result = 0;
    reader.Read(result);

    // end reading invocation response
    context.EndServiceInvocationResponse();

    return result;
}

int32 MqttClientServiceProxy::TryConsumeMessage(int32 clientId, Message& msg)
{
    const RscHandle methodHandle = 9;
    RscClient::TransactionGuard guard(this->rscClient, *this);

    RscClientContext context(this->rscClient);
    context.BeginServiceInvocationRequest(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // serialize params here
    RscWriter& writer = context.GetWriter();
    writer.Write(clientId);

    // process end of invocation request
    context.EndServiceInvocationRequest();

    // start reading invocation response
    context.BeginServiceInvocationResponse(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // deserialize return params here
    RscReader& reader = context.GetReader();
    reader.Read(msg);
    int32 result = 0;
    reader.Read(result);

    // end reading invocation response
    context.EndServiceInvocationResponse();

    return result;
}

int32 MqttClientServiceProxy::Unsubscribe(int32 clientId, const RscString<512>& topicFilter)
{
    const RscHandle methodHandle = 10;
    RscClient::TransactionGuard guard(this->rscClient, *this);

    RscClientContext context(this->rscClient);
    context.BeginServiceInvocationRequest(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // serialize params here
    RscWriter& writer = context.GetWriter();
    writer.Write(clientId);
    writer.Write(topicFilter);

    // process end of invocation request
    context.EndServiceInvocationRequest();

    // start reading invocation response
    context.BeginServiceInvocationResponse(this->rscServiceProviderHandle, this->rscServiceHandle, methodHandle);

    // deserialize return params here
    RscReader& reader = context.GetReader();
    int32 result = 0;
    reader.Read(result);

    // end reading invocation response
    context.EndServiceInvocationResponse();

    return result;
}


}}} // end of namespace PxceTcs::MqttClient::Services
